#!/bin/bash
set -ue

# Required environment variables, provide before calling/sourceing this script.
# Per default, these are provided by the "rstudio" script of this container.
#
# Directory (host path) that shall be mounted as the project directory
# inside the container. If the current working directory deviates from the
# project dir, changing the working directory accordingly inside the
# container is attempted
: ${PROJECT_DIR}
# Array of arguments that are forwarded to "singularity instance". If no
# instance is started (function cexec()), they are forwarded to singularity
# exec
: "${ARGS_INSTANCE[@]}"
# Array of arguments that are forwarded to singularity exec, for example when
# executing the rserver binary in the container or the cexec() function
: "${ARGS_EXEC[@]}"
# Path where the project directory is mounted inside the container
: "${BIND_PROJECT_TO}"
# Path to the container SIF file
: "${CONTAINER}"
# Path (host system) where the session data of different RStudio Server
# sessions is stored.  Per session, a subfolder is created that is mounted to
# ~/.rstudio inside the container.  Also, the .pid files are created here,
# holding information about network port, host machine and more.
: "${DIR_RUN}"
# IP adress to bind the server to. Probably this is "127.0.0.1". Binding to
# non-localhost adresses has security implications as the connection is not
# encrypted.
: "${ADDRESS}"
# Minimum and maximum of the port range to scan for a free port for a newly
# started RStudio Server
: "${port_min}"
: "${port_max}"

thisdir="$(dirname "${BASH_SOURCE[0]}")"

source "${thisdir}/functions-r.sh"



help(){
  cat <<EOF

   Usage: rstudio COMMAND [COMMAND ARGS...]
          rstudio COMMAND --help
          rstudio --help

Manage RStudio Server sessions in this folder.

Commands:
start  Start a new RStudio server session.
list   Show the running sessions.
stop   Stop a running RStudio server instance.
exec   Execute a commmand inside the container.
shell  Open a shell in a running RStudio instance.
passwd Set the password to access RStudio.
shell  Start a bash shell in the given running instance
create Create a new session.
delete Delete a session.
--help Show this help.

Show help for individual commands by appending "--help", e.g. 
"./rstudio start --help"

To stop a running RStudio session, use 'rstudio list' to find the
PID and then call 'kill PID', (replacing PID)
EOF
}


list(){
  local verbose=
  while [ $# -gt 0 ]; do
    c="$1"
    if [ "$c" = "-v" ]; then
      local verbose="yes"
      shift 1
    else
      msg "Wrong usage of 'list' command, see ./rstudio --help"
      exit 1
    fi
  done

  shopt -s nullglob
  local rundirs=("$DIR_RUN"/*.rstudio)
  shopt -u nullglob
  if [ ${#rundirs[@]} = 0 ]; then
    msg "\nNo RStudio sessions running in this directory.\n"
    return 0
  fi
  
  if [ "$verbose" = "yes" ]; then
    local fmt="%10s %6s %16s %20s %20s %s\n"
    printf "$fmt" "ID" "PID" "instance" "address" "hostname" "status"
  else
    local fmt="%10s %20s %30s %s\n"
    printf "$fmt" "ID" "address" "hostname" "status"
  fi
  for f in "${rundirs[@]}"; do
    local id="${f:${#DIR_RUN}:-8}" # strip off directory name and ".pid"
    local id="${id:1}" # strip off leading "/"

    get_instance_by_id "$id"   # -> sets id, pidfile, PID, instancename, address, hostname

    local status=""
    if [ -z "$PID" ]; then
      status="stopped"
    # If the instance runs on this machine, test if it is functional
    elif [ "$(uname -n)" = "$hostname" ]; then
      # 0 = valid, 1 = no such PID
      local pid_valid="$(kill -s 0 "$PID" 2>/dev/null; echo $?; )"
      # 1 = no instance, 2 = instance exists
      local has_instance="$(singularity instance list "$instancename" | wc -l)"

      if [ "$pid_valid" = 0 -a "$has_instance" = 2 ]; then
        status=running;
      elif [ "$pid_valid" = 1 -a "$has_instance" = 2 ]; then
        status="running (BARE INSTANCE)";
      else
        status="CRASHED"
      fi
    else
      status="unknown (other machine)"
    fi

    if [ "$verbose" = "yes" ]; then 
      printf "$fmt" "$id" "${PID:--}" "${instancename:--}" "${address:--}" "${hostname:--}" "$status"
    else
      printf "$fmt" "$id" "${address:--}" "${hostname:--}" "$status"
    fi
  done
}

create(){
  while [ $# -gt 0 ]; do
    case "$1" in
    --help) 
      msg "Create a new session. A session has a folder in \"$DIR_RUN\" that"
      msg "persists across restarts and contains information like the list"
      msg "of open files or last used projects. It does not store code that"
      msg "is written using RStudio"
      exit 0
      ;;
    --*) msg "Unknown option $1"; exit 1; ;;
    --) shift; break; ;;
    *) break; ;;
    esac
  done

  local id="${1-default}"
  if [[ "$id" = ""  || "$id" =~ [^a-zA-Z0-9] ]]; then
    msg "Container ID must be alphanumeric and not empty" 
    exit 1
  fi
  local rundir="$DIR_RUN/${id}.rstudio"
  local pidfile="$DIR_RUN/${id}.pid"
  if [ -e "$rundir" ]; then
    msg "Instance \"$id\" already exists. Choose a different name"
    exit 1
  fi
  mkdir -p "$rundir"
  touch "$pidfile"
}

# Returns values by SETTING GLOBAL VARIABLES:
#   pidfile, rundir, PID, instancename, address, hostname
#
get_instance_by_id(){
  local status
  if [ "${1-}" = "-r" ]; then
    status="running"
    shift
  elif [ "${1-}" = "-s" ]; then
    status="stopped"
    shift
  else
    status="any"
  fi

  local id="$1"
  if [[ -z "$id"  || "$id" =~ [^a-zA-Z0-9] ]]; then
    msg "Container ID must be alphanumeric and not empty" 
    exit 1
  fi
  pidfile="$DIR_RUN/${id}.pid"
  rundir="$DIR_RUN/${id}.rstudio"
  if [ ! -d "$rundir" ]; then 
    msg ""
    msg "RStudio instance with ID '$id' not found. Run ./rstudio list"
    msg "for a list of running instances."
    msg ""
    exit 1
  fi
  if [ ! -e "$pidfile" ]; then touch "$pidfile"; fi

  # Expect that "read" returns an error exit code if the pidfile is
  # empty
  # This needs bash>=4.2
  declare -g PID instancename address hostname tmpdir
  set +e
  # Reading in each variable separately avoids splitting by whitespace
  { read PID; read instancename; read address; read hostname; read tmpdir; } < "$pidfile"
  set -e

  if [ "$status" = "running" ]; then
    if [ -z "$PID" ]; then
      msg "Instance \"$id\" is not running."
      exit 1
    fi
    if [ "$(uname -n)" != "$hostname" ]; then
      msg ""
      msg "This instance is not running on this machine."
      msg "%-20s %s" "This machine:" "$(uname -n)"
      msg "%-20s %s" "Instance $id runs on:" "$hostname"
      msg ""
      exit 1
    fi

    if ! kill -s 0 "$PID" 2>/dev/null; then
       msg "Instance \"$id\" was terminated uncleanly. Please"
       msg "1. Check whether the Singularity instance \"$instancename\""
       msg "   still exists and terminate it using \"singularity instance stop\"."
       msg "2. Remove the temporary directory \"$tmpdir\""
       msg "3. Remove the file \"$pidfile\""
    fi
  fi

  if [ "$status" = "stopped" ]; then
    if [ ! -z "$PID" ]; then
      msg "Instance \"$id\" is running on $hostname,"
      msg "address \"$address\"."
      exit 1
    fi
  fi

}
delete(){
  if [ "$#" == 0 -o "${1-}" == "--help" ]; then
    msg "Usage: rstudio delete INSTANCENAME"
    if [ "${1-}" == "--help" ]; then
      msg ""
      msg "Delete the given container instance. This removes information like"
      msg "the list of open files or projects and unsaved files. It does not delete"
      msg "saved code or data. Technically, this command removes the folder"
      msg "\"$DIR_RUN/INSTANCENAME.rstudio\" and \"INSTANCENAME.pid\"."
      msg ""
      exit 0
    else
      exit 1
    fi
  fi
  local id="${1}"
  get_instance_by_id -s "$id"   # -> sets id, pidfile, rundir, PID, instancename, address, hostname

  rm -r "$rundir"
  rm "$pidfile"

}

shell(){

  if [ "${1-}" == "--help" ]; then
    msg "Usage: rstudio shell <ID>"
    msg ""
    msg "In the running RStudio container with ID <ID>, launch an"
    msg "interactive bash shell (bash -l)."
    msg "Run './rstudio list' to get a list of all running instances"
    msg "and their IDs."
    msg ""
    exit 0
  fi

  if [ ! $# = 1 ]; then
    msg "Usage: rstudio shell <ID>"
    msg "Use --help for more info."
    exit 1
  fi

  get_instance_by_id -r "$1"  # -> sets id, pidfile, rundir, PID, instancename, address, hostname

  if [ -z "$instancename" ]; then
    msg "Instance \"$id\" is not running."
    exit 1
  fi

  singularity exec "instance://$instancename" bash -l
}


rstudio_passwd(){
  if [ ! $# = 0 ]; then
    msg "Usage: rstudio passwd"
    msg "Use --help for more info." 
    # --help is handled by rstudio_passwd program
    exit 1
  fi
  cexec /usr/lib/rstudio-server/bin/rstudio_passwd "$@"
}

make_temp(){
  local tmpdir="$(mktemp -d -t rstudio-XXXXXXXX)"
  # We delete this directory afterwards, so its important that $tmpdir
  # really has the path to an empty, temporary dir, and nothing else!
  # (for example empty string or home dir)
  if [[ ! "$tmpdir" || ! -d "$tmpdir" ]]; then
    echo "Error: Could not create temp dir $tmpdir"
    exit 1
  fi
  
  # check if temp dir is empty
  tmpcontent="$(ls -A "$tmpdir")"
  if [ ! -z "$tmpcontent" ]; then
    echo "Error: Temp dir '$tmpdir' is not empty"
    exit 1
  fi
  echo "$tmpdir"
}

start(){
  
  logfile="/dev/null"
  while [ "$#" -gt 0 ]; do
    case "$1" in
      --log)
        logfile="$2"
        msg "logging to $logfile"
        shift 2
        ;;
    --help) 
      msg "Usage: rstudio start [ID]"
      msg "Start the given RStudio session. If a session of the given"
      msg "name does not exist, it is created. A temporaray directory"
      msg "is created and assigned to the session. A free port is"
      msg "searched and printed to the screen. A singularity instance"
      msg "is created and RStudio Server is started therein."
      msg ""
      msg "Options:"
      msg "--log FILE  Write log output to this file. Default: no log"
      msg ""
      exit 0
      ;;
      --) shift; break; ;;
      *) break; ;;
    esac
  done

  local id="${1-default}"

  if [ ! -d "$DIR_RUN/${id}.rstudio" ]; then
    msg "Creating instance \"$id\""
    create "$id"
  fi

  get_instance_by_id -s "$id"  # -> sets id, pidfile, rundir, PID, instancename, address, hostname

  msg "Starting instance \"$id\""

  if [[ ! -e ".rstudio-passwd" || 
    "$(cat ".rstudio-passwd" | wc -l)" = 0 ]]; then
    cat <<EOF
  
  You need to set a password for RStudio first! You can do this at any time
  by calling ./rstudio passwd
  
EOF
    echo -n "Do you want to set the RStudio password now? [y/N] " >&2
    read answer
    if [[ $answer =~ [yY] ]]; then
      rstudio_passwd
    else
      exit 1
    fi
  fi
  
  # Create a temporary directory
  tmpdir="$(make_temp)"
  
  #port=$("$thisdir/cexec" find_port "$address" "$port_min" "$port_max")
  port=$(singularity -s exec "$CONTAINER" /usr/bin/find_port "$ADDRESS" "$port_min" "$port_max")
  msg ""
  msg "Access RStudio Server on http://$ADDRESS:$port"
  msg ""
  msg "To log in to RStudio, use your user name and the"
  msg "RStudio password for this project."
  msg "Call './rstudio passwd' to change the RStudio password."
  
  # Start Singularity instance
  instancename="$(basename "$tmpdir")"
  runfile="$DIR_RUN/${id}.pid"
  rundir="$DIR_RUN/${id}.rstudio"
  
  if [ ! -d "$rundir" ]; then
    create "$id";
    msg "Created new container \"$id\""
  fi
  mkdir -p "$rundir"
  mkdir "$rundir/var-lib"
  mkdir "$rundir/rstudio"

  (
    singularity instance start \
      -W "$tmpdir" \
      -B "$tmpdir:/var/run" \
      -B "$rundir/var-lib:/var/lib/rstudio-server" \
      -B "$rundir/rstudio:$BIND_PROJECT_TO/.rstudio" \
      "${ARGS_INSTANCE[@]}" \
      "$CONTAINER" \
      "$instancename"
    
    # Delete the temporary directory after the end of the script
    cleanup(){
      singularity instance stop "$instancename"
      if [ -d "$tmpdir" ]; then rm -rf "$tmpdir"; fi
      if [ -f "$runfile" ]; then echo > "$runfile"; fi
    }

    trap cleanup EXIT
    trap "echo caught SIGHUP" HUP
    
    # Save PID and other infos
    pid=$BASHPID
    hostname="$(uname -n)"
    cat <<EOF >"$runfile"
$pid
$instancename
$ADDRESS:$port
$hostname
$tmpdir
EOF
  
    # log error code
    set +e 

    SINGULARITYENV_RSTUDIO_PASSWORD_FILE="$BIND_PROJECT_TO/.rstudio-passwd" \
    singularity exec \
      "${ARGS_EXEC[@]}" \
      --pwd "$BIND_PROJECT_TO" \
      "instance://$instancename" \
        rserver \
        --www-address $ADDRESS \
        --www-port $port \
        --auth-none 0 \
        --server-daemonize=no \
        --auth-pam-helper rstudio_auth_file 
    code=$?
    if [ ! $code = 0 ]; then
      msg "rserver exited with code $code"
    fi
    return $code

    ) </dev/null &>"$logfile" &
    disown $!
  
}

stop(){

  while [ "$#" -gt 0 ]; do
    case "$1" in
    --help)
      msg "Usage: rstudio stop [ID]"
      msg ""
      msg "Stop the RStudio instance given by <ID>. If you did not set "
      msg "a session name when you started RStudio the instance name is"
      msg "probably \"default\"."
      msg ""
      msg "Run './rstudio list' to get a list of all running instances"
      msg "and their IDs".
      msg ""
      exit 0
      ;;
    --*)
      msg "Unknown argument \"$1\""
      exit 1
      ;;
    *)
      break 
      ;;
    esac
  done


  if [ ! "$#" -gt 0 ]; then
    msg "Container ID is missing."
    msg ""
    msg "Usage: rstudio stop ID"
    msg "Use \"./rstudio stop --help for help"
    msg "Use \"./rstudio list\" to get a list of IDs"
    exit 1
  fi

  local id="${1}"

  get_instance_by_id -r "$1"  # -> sets id, pidfile, rundir, PID, instancename, address, hostname

  # singularity instance stop "$instancename"
  kill $PID

}



if [ $# = 0 ]; then
  msg ""
  msg "Available commands: "
  msg "  list, start, stop, passwd, shell, create, delete."
  msg ""
  msg "Type \"./rstudio --help\" for more info."
  msg ""
  exit 1
else
  cmd="$1"
  shift
fi

case $cmd in 
  list)   list "$@"; ;;
  start)  start "$@"; ;;
  stop)   stop "$@"; ;;
  exec)   cexec "$@"; ;;
  passwd) rstudio_passwd "$@"; ;;
  shell)  shell "$@"; ;;
  create) create "$@"; ;;
  delete) delete "$@"; ;;
  --help) help; ;;
  *) msg "Unknown argument. Use --help to show the help for this command"
esac


