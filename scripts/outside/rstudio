#!/usr/bin/env bash
set -ue
#
# Main starting script for this container. 
#
# Determine parameters for singularity for high reproducibility
# based on the environment variables provided by the caller.
# Then forward the container commands to other scripts
#

thisdir="$(dirname "${BASH_SOURCE[0]}")"
export CONTAINER_DIR="$thisdir"

# Required environment variables: 
# * PROJECT_DIR:   Where the project directory is outside of the container
#

# ===== Default settings for RStudio Server startscript ======
BIND_PROJECT_TO="/proj"    # Where project directory is mounted inside of the container
DIR_RUN="$PROJECT_DIR/.run/rstudio-container"
ADDRESS="127.0.0.1"
port_min=8000
port_max=8100
CONTAINER="$thisdir/rstudio.sif"
# Accept unset as empty, because it is an array and for arrays,
# A=() means A is unset
: "${EXTERNAL_FILES-}"     # Which external files/folders are accessible. 

# === Helpful messages for first-time users ==================

if [ -z "${PROJECT_DIR-}" ]; then
  echo "ERROR: Don't know project directory." >&2
  echo "Execute 'createproject' if you run RStudio in this directory for the first time" >&2
  exit 1
fi
# ===== Default settings for Singularity =====================

# ...to singularity instance
ARGS_INSTANCE=(
  --contain
  -H "$PROJECT_DIR:$BIND_PROJECT_TO"
)

# ... to singularity exec
# (if no instance is started, then $ARGS_INSTANCE is
# also provided to singularity exec)
ARGS_EXEC=(
  --cleanenv
)

# Add external files as "-B...." arguments to singularity
# command line
for i in ${!EXTERNAL_FILES[@]}; do
  ARGS_INSTANCE+=(-B "${EXTERNAL_FILES[$i]}")
done


# ===== Forward to starting script ==========================

if [ "$#" = 0 ]; then
  echo Argument required >&2
  exit 1
fi


source "$thisdir"/rstudio_adv "$@"

